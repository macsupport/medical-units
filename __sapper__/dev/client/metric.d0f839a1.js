import { S as SvelteComponentDev, a as init, d as dispatch_dev, s as safe_not_equal, v as validate_each_argument, b as validate_slots, F as Fa, f as faFlagUsa, c as faGlobe, e as faArrowsAltH, g as faVial, h as faCalculator, j as element, t as text, k as space, l as create_component, m as claim_element, n as children, o as claim_text, q as claim_space, r as claim_component, p as detach_dev, u as attr_dev, w as add_location, x as insert_dev, y as append_dev, z as mount_component, A as listen_dev, B as set_data_dev, C as prop_dev, D as transition_in, E as transition_out, G as destroy_component, H as run_all, I as query_selector_all, J as set_input_value, K as check_outros, L as destroy_each, M as group_outros } from './client.f0abdcae.js';
import { f as fade, a as fly } from './index.3135d08c.js';

/* src/routes/metric.svelte generated by Svelte v3.24.1 */

const file = "src/routes/metric.svelte";

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[12] = list[i];
	child_ctx[4] = i;
	return child_ctx;
}

// (88:2) {#each filteredUnits as unit, i}
function create_each_block(ctx) {
	let div8;
	let div7;
	let div2;
	let div0;
	let t0_value = /*unit*/ ctx[12].conventionalUnit + "";
	let t0;
	let t1;
	let fa0;
	let t2;
	let t3_value = /*unit*/ ctx[12].siUnit + "";
	let t3;
	let t4;
	let div1;
	let strong;
	let t5;
	let t6;
	let t7_value = /*unit*/ ctx[12].factor + "";
	let t7;
	let t8;
	let div4;
	let label0;
	let fa1;
	let t9;
	let t10;
	let input0;
	let input0_name_value;
	let input0_value_value;
	let t11;
	let div3;
	let t12_value = /*unit*/ ctx[12].conventionalUnit + "";
	let t12;
	let t13;
	let div6;
	let label1;
	let fa2;
	let t14;
	let t15;
	let input1;
	let input1_name_value;
	let input1_value_value;
	let t16;
	let div5;
	let t17_value = /*unit*/ ctx[12].siUnit + "";
	let t17;
	let t18;
	let current;
	let mounted;
	let dispose;

	fa0 = new Fa({
			props: {
				class: "inline text-gray-700",
				size: "lg",
				icon: faArrowsAltH
			},
			$$inline: true
		});

	fa1 = new Fa({
			props: {
				class: "inline",
				size: "lg",
				primaryColor: "blue",
				secondaryColor: "red",
				icon: faFlagUsa
			},
			$$inline: true
		});

	function input_handler(...args) {
		return /*input_handler*/ ctx[6](/*i*/ ctx[4], ...args);
	}

	fa2 = new Fa({
			props: {
				class: "inline",
				size: "lg",
				primaryColor: "green",
				secondaryColor: "lightblue",
				icon: faGlobe
			},
			$$inline: true
		});

	function input_handler_1(...args) {
		return /*input_handler_1*/ ctx[7](/*i*/ ctx[4], ...args);
	}

	const block = {
		c: function create() {
			div8 = element("div");
			div7 = element("div");
			div2 = element("div");
			div0 = element("div");
			t0 = text(t0_value);
			t1 = space();
			create_component(fa0.$$.fragment);
			t2 = space();
			t3 = text(t3_value);
			t4 = space();
			div1 = element("div");
			strong = element("strong");
			t5 = text("Conversion Factor:");
			t6 = space();
			t7 = text(t7_value);
			t8 = space();
			div4 = element("div");
			label0 = element("label");
			create_component(fa1.$$.fragment);
			t9 = text(" US Unit");
			t10 = space();
			input0 = element("input");
			t11 = space();
			div3 = element("div");
			t12 = text(t12_value);
			t13 = space();
			div6 = element("div");
			label1 = element("label");
			create_component(fa2.$$.fragment);
			t14 = text(" SI Unit");
			t15 = space();
			input1 = element("input");
			t16 = space();
			div5 = element("div");
			t17 = text(t17_value);
			t18 = space();
			this.h();
		},
		l: function claim(nodes) {
			div8 = claim_element(nodes, "DIV", { class: true });
			var div8_nodes = children(div8);
			div7 = claim_element(div8_nodes, "DIV", { class: true });
			var div7_nodes = children(div7);
			div2 = claim_element(div7_nodes, "DIV", { class: true });
			var div2_nodes = children(div2);
			div0 = claim_element(div2_nodes, "DIV", { class: true });
			var div0_nodes = children(div0);
			t0 = claim_text(div0_nodes, t0_value);
			t1 = claim_space(div0_nodes);
			claim_component(fa0.$$.fragment, div0_nodes);
			t2 = claim_space(div0_nodes);
			t3 = claim_text(div0_nodes, t3_value);
			div0_nodes.forEach(detach_dev);
			t4 = claim_space(div2_nodes);
			div1 = claim_element(div2_nodes, "DIV", { class: true });
			var div1_nodes = children(div1);
			strong = claim_element(div1_nodes, "STRONG", {});
			var strong_nodes = children(strong);
			t5 = claim_text(strong_nodes, "Conversion Factor:");
			strong_nodes.forEach(detach_dev);
			t6 = claim_space(div1_nodes);
			t7 = claim_text(div1_nodes, t7_value);
			div1_nodes.forEach(detach_dev);
			div2_nodes.forEach(detach_dev);
			t8 = claim_space(div7_nodes);
			div4 = claim_element(div7_nodes, "DIV", { class: true });
			var div4_nodes = children(div4);
			label0 = claim_element(div4_nodes, "LABEL", { class: true, for: true });
			var label0_nodes = children(label0);
			claim_component(fa1.$$.fragment, label0_nodes);
			t9 = claim_text(label0_nodes, " US Unit");
			label0_nodes.forEach(detach_dev);
			t10 = claim_space(div4_nodes);

			input0 = claim_element(div4_nodes, "INPUT", {
				class: true,
				name: true,
				value: true,
				type: true,
				placeholder: true
			});

			t11 = claim_space(div4_nodes);
			div3 = claim_element(div4_nodes, "DIV", { class: true });
			var div3_nodes = children(div3);
			t12 = claim_text(div3_nodes, t12_value);
			div3_nodes.forEach(detach_dev);
			div4_nodes.forEach(detach_dev);
			t13 = claim_space(div7_nodes);
			div6 = claim_element(div7_nodes, "DIV", { class: true });
			var div6_nodes = children(div6);
			label1 = claim_element(div6_nodes, "LABEL", { class: true, for: true });
			var label1_nodes = children(label1);
			claim_component(fa2.$$.fragment, label1_nodes);
			t14 = claim_text(label1_nodes, " SI Unit");
			label1_nodes.forEach(detach_dev);
			t15 = claim_space(div6_nodes);

			input1 = claim_element(div6_nodes, "INPUT", {
				class: true,
				name: true,
				value: true,
				type: true,
				placeholder: true
			});

			t16 = claim_space(div6_nodes);
			div5 = claim_element(div6_nodes, "DIV", { class: true });
			var div5_nodes = children(div5);
			t17 = claim_text(div5_nodes, t17_value);
			div5_nodes.forEach(detach_dev);
			div6_nodes.forEach(detach_dev);
			div7_nodes.forEach(detach_dev);
			t18 = claim_space(div8_nodes);
			div8_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(div0, "class", "font-bold text-black text-xl");
			add_location(div0, file, 94, 14, 4932);
			add_location(strong, file, 96, 105, 5201);
			attr_dev(div1, "class", "text-gray-700 text-xs");
			add_location(div1, file, 96, 9, 5105);
			attr_dev(div2, "class", "w-full md:w-2/5");
			add_location(div2, file, 92, 1, 4874);
			attr_dev(label0, "class", "block uppercase tracking-wide text-gray-700 text-xs font-bold mb-1");
			attr_dev(label0, "for", "grid-first-name");
			add_location(label0, file, 100, 2, 5329);
			attr_dev(input0, "class", "appearance-none mt-1 block w-full bg-gray-100 text-gray-700 border border-blue-200 rounded py-2 px-2 leading-tight focus:outline-none focus:bg-white focus:border-gray-500");
			attr_dev(input0, "name", input0_name_value = "us" + /*i*/ ctx[4]);
			input0.value = input0_value_value = /*unit*/ ctx[12].usValue;
			attr_dev(input0, "type", "number");
			attr_dev(input0, "placeholder", " ");
			add_location(input0, file, 103, 15, 5569);
			attr_dev(div3, "class", "text-gray-700 text-sm");
			add_location(div3, file, 104, 0, 5870);
			attr_dev(div4, "class", "md:w-1/3 w-1/2  h-14 pr-1 pl-1");
			add_location(div4, file, 99, 2, 5282);
			attr_dev(label1, "class", "block uppercase tracking-wide text-gray-700 text-xs font-bold mb-1");
			attr_dev(label1, "for", "grid-first-name");
			add_location(label1, file, 108, 1, 6003);
			attr_dev(input1, "class", "appearance-none mt-1 block w-full bg-gray-100 text-gray-700 border border-gray-200 rounded py-2 px-2 leading-tight focus:outline-none focus:bg-white focus:border-gray-500");
			attr_dev(input1, "name", input1_name_value = "si" + /*i*/ ctx[4]);
			input1.value = input1_value_value = /*unit*/ ctx[12].siValue;
			attr_dev(input1, "type", "number");
			attr_dev(input1, "placeholder", " ");
			add_location(input1, file, 111, 15, 6249);
			attr_dev(div5, "class", "text-gray-700 text-sm");
			add_location(div5, file, 112, 0, 6549);
			attr_dev(div6, "class", "md:w-1/3 w-1/2  h-14 pr-1 pl-1");
			add_location(div6, file, 107, 1, 5957);
			attr_dev(div7, "class", "flex flex-wrap md:flex-no-wrap lg:flex-no-wrap px-1  mb-1");
			add_location(div7, file, 91, 1, 4801);
			attr_dev(div8, "class", "border border-gray-300 rounded mb-2");
			add_location(div8, file, 88, 1, 4748);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div8, anchor);
			append_dev(div8, div7);
			append_dev(div7, div2);
			append_dev(div2, div0);
			append_dev(div0, t0);
			append_dev(div0, t1);
			mount_component(fa0, div0, null);
			append_dev(div0, t2);
			append_dev(div0, t3);
			append_dev(div2, t4);
			append_dev(div2, div1);
			append_dev(div1, strong);
			append_dev(strong, t5);
			append_dev(div1, t6);
			append_dev(div1, t7);
			append_dev(div7, t8);
			append_dev(div7, div4);
			append_dev(div4, label0);
			mount_component(fa1, label0, null);
			append_dev(label0, t9);
			append_dev(div4, t10);
			append_dev(div4, input0);
			append_dev(div4, t11);
			append_dev(div4, div3);
			append_dev(div3, t12);
			append_dev(div7, t13);
			append_dev(div7, div6);
			append_dev(div6, label1);
			mount_component(fa2, label1, null);
			append_dev(label1, t14);
			append_dev(div6, t15);
			append_dev(div6, input1);
			append_dev(div6, t16);
			append_dev(div6, div5);
			append_dev(div5, t17);
			append_dev(div8, t18);
			current = true;

			if (!mounted) {
				dispose = [
					listen_dev(input0, "input", input_handler, false, false, false),
					listen_dev(input1, "input", input_handler_1, false, false, false)
				];

				mounted = true;
			}
		},
		p: function update(new_ctx, dirty) {
			ctx = new_ctx;
			if ((!current || dirty & /*filteredUnits*/ 2) && t0_value !== (t0_value = /*unit*/ ctx[12].conventionalUnit + "")) set_data_dev(t0, t0_value);
			if ((!current || dirty & /*filteredUnits*/ 2) && t3_value !== (t3_value = /*unit*/ ctx[12].siUnit + "")) set_data_dev(t3, t3_value);
			if ((!current || dirty & /*filteredUnits*/ 2) && t7_value !== (t7_value = /*unit*/ ctx[12].factor + "")) set_data_dev(t7, t7_value);

			if (!current || dirty & /*filteredUnits*/ 2 && input0_value_value !== (input0_value_value = /*unit*/ ctx[12].usValue)) {
				prop_dev(input0, "value", input0_value_value);
			}

			if ((!current || dirty & /*filteredUnits*/ 2) && t12_value !== (t12_value = /*unit*/ ctx[12].conventionalUnit + "")) set_data_dev(t12, t12_value);

			if (!current || dirty & /*filteredUnits*/ 2 && input1_value_value !== (input1_value_value = /*unit*/ ctx[12].siValue)) {
				prop_dev(input1, "value", input1_value_value);
			}

			if ((!current || dirty & /*filteredUnits*/ 2) && t17_value !== (t17_value = /*unit*/ ctx[12].siUnit + "")) set_data_dev(t17, t17_value);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(fa0.$$.fragment, local);
			transition_in(fa1.$$.fragment, local);
			transition_in(fa2.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(fa0.$$.fragment, local);
			transition_out(fa1.$$.fragment, local);
			transition_out(fa2.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div8);
			destroy_component(fa0);
			destroy_component(fa1);
			destroy_component(fa2);
			mounted = false;
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block.name,
		type: "each",
		source: "(88:2) {#each filteredUnits as unit, i}",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let meta;
	let script0;
	let script0_src_value;
	let script1;
	let script1_src_value;
	let script2;
	let t0;
	let t1;
	let div1;
	let div0;
	let t2;
	let input;
	let t3;
	let t4;
	let footer;
	let t5;
	let current;
	let mounted;
	let dispose;
	let each_value = /*filteredUnits*/ ctx[1];
	validate_each_argument(each_value);
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	const out = i => transition_out(each_blocks[i], 1, 1, () => {
		each_blocks[i] = null;
	});

	const block = {
		c: function create() {
			meta = element("meta");
			script0 = element("script");
			script1 = element("script");
			script2 = element("script");
			t0 = text("window.dataLayer = window.dataLayer || [];\n  function gtag(){dataLayer.push(arguments);}\n  gtag('js', new Date());\n\n  gtag('config', 'UA-255701-18');");
			t1 = space();
			div1 = element("div");
			div0 = element("div");
			t2 = text("Search Units ");
			input = element("input");
			t3 = space();

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			t4 = space();
			footer = element("footer");
			t5 = text("www.medicalunitconverter.com");
			this.h();
		},
		l: function claim(nodes) {
			const head_nodes = query_selector_all("[data-svelte=\"svelte-15u5tqe\"]", document.head);
			meta = claim_element(head_nodes, "META", { name: true, content: true });
			script0 = claim_element(head_nodes, "SCRIPT", { async: true, src: true });
			var script0_nodes = children(script0);
			script0_nodes.forEach(detach_dev);
			script1 = claim_element(head_nodes, "SCRIPT", { async: true, src: true });
			var script1_nodes = children(script1);
			script1_nodes.forEach(detach_dev);
			script2 = claim_element(head_nodes, "SCRIPT", {});
			var script2_nodes = children(script2);
			t0 = claim_text(script2_nodes, "window.dataLayer = window.dataLayer || [];\n  function gtag(){dataLayer.push(arguments);}\n  gtag('js', new Date());\n\n  gtag('config', 'UA-255701-18');");
			script2_nodes.forEach(detach_dev);
			head_nodes.forEach(detach_dev);
			t1 = claim_space(nodes);
			div1 = claim_element(nodes, "DIV", { class: true });
			var div1_nodes = children(div1);
			div0 = claim_element(div1_nodes, "DIV", { class: true });
			var div0_nodes = children(div0);
			t2 = claim_text(div0_nodes, "Search Units ");

			input = claim_element(div0_nodes, "INPUT", {
				placeholder: true,
				class: true,
				type: true
			});

			div0_nodes.forEach(detach_dev);
			t3 = claim_space(div1_nodes);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(div1_nodes);
			}

			div1_nodes.forEach(detach_dev);
			t4 = claim_space(nodes);
			footer = claim_element(nodes, "FOOTER", { class: true });
			var footer_nodes = children(footer);
			t5 = claim_text(footer_nodes, "www.medicalunitconverter.com");
			footer_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			document.title = "medicalunitconverter.com";
			attr_dev(meta, "name", "description");
			attr_dev(meta, "content", "Medical unit conversion calculator, medicalunitconverter.com. Convert US units to International (SI) units easily with this onlne calculator. Easily search for a specific lab test, enter any value and convert the units. For both Human and Veterinary values.");
			add_location(meta, file, 2, 2, 58);
			script0.async = true;
			if (script0.src !== (script0_src_value = "https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js")) attr_dev(script0, "src", script0_src_value);
			add_location(script0, file, 3, 4, 356);
			script1.async = true;
			if (script1.src !== (script1_src_value = "https://www.googletagmanager.com/gtag/js?id=UA-255701-18")) attr_dev(script1, "src", script1_src_value);
			add_location(script1, file, 6, 0, 504);
			add_location(script2, file, 7, 0, 591);
			attr_dev(input, "placeholder", "Unit");
			attr_dev(input, "class", "mt-1 block w-full  text-gray-700 border border-gray-300 rounded-lg py-2 px-2 leading-tight bg-white  focus:outline-none focus:bg-white focus:border-gray-500");
			attr_dev(input, "type", "search");
			add_location(input, file, 84, 65, 4478);
			attr_dev(div0, "class", "md:w-1/4 mb-3 sm:w-1/3 text-black p-1");
			add_location(div0, file, 84, 1, 4414);
			attr_dev(div1, "class", "mx-auto px-1");
			add_location(div1, file, 77, 2, 4378);
			attr_dev(footer, "class", "w-full text-center border-t border-grey p-4 pin-b");
			add_location(footer, file, 130, 0, 6691);
		},
		m: function mount(target, anchor) {
			append_dev(document.head, meta);
			append_dev(document.head, script0);
			append_dev(document.head, script1);
			append_dev(document.head, script2);
			append_dev(script2, t0);
			insert_dev(target, t1, anchor);
			insert_dev(target, div1, anchor);
			append_dev(div1, div0);
			append_dev(div0, t2);
			append_dev(div0, input);
			set_input_value(input, /*prefix*/ ctx[0]);
			append_dev(div1, t3);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(div1, null);
			}

			insert_dev(target, t4, anchor);
			insert_dev(target, footer, anchor);
			append_dev(footer, t5);
			current = true;

			if (!mounted) {
				dispose = listen_dev(input, "input", /*input_input_handler*/ ctx[5]);
				mounted = true;
			}
		},
		p: function update(ctx, [dirty]) {
			if (dirty & /*prefix*/ 1) {
				set_input_value(input, /*prefix*/ ctx[0]);
			}

			if (dirty & /*filteredUnits, setBothFromSI, faGlobe, setBothFromUS, faFlagUsa, faArrowsAltH*/ 14) {
				each_value = /*filteredUnits*/ ctx[1];
				validate_each_argument(each_value);
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
						transition_in(each_blocks[i], 1);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						transition_in(each_blocks[i], 1);
						each_blocks[i].m(div1, null);
					}
				}

				group_outros();

				for (i = each_value.length; i < each_blocks.length; i += 1) {
					out(i);
				}

				check_outros();
			}
		},
		i: function intro(local) {
			if (current) return;

			for (let i = 0; i < each_value.length; i += 1) {
				transition_in(each_blocks[i]);
			}

			current = true;
		},
		o: function outro(local) {
			each_blocks = each_blocks.filter(Boolean);

			for (let i = 0; i < each_blocks.length; i += 1) {
				transition_out(each_blocks[i]);
			}

			current = false;
		},
		d: function destroy(detaching) {
			detach_dev(meta);
			detach_dev(script0);
			detach_dev(script1);
			detach_dev(script2);
			if (detaching) detach_dev(t1);
			if (detaching) detach_dev(div1);
			destroy_each(each_blocks, detaching);
			if (detaching) detach_dev(t4);
			if (detaching) detach_dev(footer);
			mounted = false;
			dispose();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props, $$invalidate) {
	let name = "";

	let units = [
		{
			"usValue": "",
			"siValue": "",
			"usAbbr": "in",
			"conventionalUnit": "inches",
			"factor": "2.54",
			"siUnit": "centimeters",
			"siAbbr": "cm"
		},
		{
			"usValue": "",
			"siValue": "",
			"usAbbr": "ft",
			"conventionalUnit": "feet",
			"factor": "30",
			"siUnit": "centimeters",
			"siAbbr": "cm"
		},
		{
			"usValue": "",
			"siValue": "",
			"usAbbr": "ft",
			"conventionalUnit": "feet",
			"factor": "0.3",
			"siUnit": "meters",
			"siAbbr": "m"
		},
		{
			"usValue": "",
			"siValue": "",
			"usAbbr": "yd",
			"conventionalUnit": "yards",
			"factor": "0.9",
			"siUnit": "meters",
			"siAbbr": "m"
		},
		{
			"usValue": "",
			"siValue": "",
			"usAbbr": "miles",
			"conventionalUnit": "miles",
			"factor": "1.6",
			"siUnit": "kilometers",
			"siAbbr": "km"
		},
		{
			"usValue": "",
			"siValue": "",
			"usAbbr": "sq in",
			"conventionalUnit": "square inches",
			"factor": "6.5",
			"siUnit": "square centimeters",
			"siAbbr": "cm<sup>2</sup>"
		},
		{
			"usValue": "",
			"siValue": "",
			"usAbbr": "sq ft",
			"conventionalUnit": "square feet",
			"factor": "0.09",
			"siUnit": "square meters",
			"siAbbr": "m<sup>2</sup>"
		},
		{
			"usValue": "",
			"siValue": "",
			"usAbbr": "sq yd",
			"conventionalUnit": "square yard",
			"factor": "0.8",
			"siUnit": "square meters",
			"siAbbr": "m<sup>2</sup>"
		},
		{
			"usValue": "",
			"siValue": "",
			"usAbbr": "sq miles",
			"conventionalUnit": "square miles",
			"factor": "2.6",
			"siUnit": "square kilometers",
			"siAbbr": "km<sup>2</sup>"
		},
		{
			"usValue": "",
			"siValue": "",
			"usAbbr": "oz",
			"conventionalUnit": "ounces",
			"factor": "28",
			"siUnit": "grams",
			"siAbbr": "g"
		},
		{
			"usValue": "",
			"siValue": "",
			"usAbbr": "lb",
			"conventionalUnit": "pounds",
			"factor": "0.45",
			"siUnit": "kilograms",
			"siAbbr": "kg"
		},
		{
			"usValue": "",
			"siValue": "",
			"usAbbr": "tsp",
			"conventionalUnit": "teaspoons",
			"factor": "5",
			"siUnit": "milliliters",
			"siAbbr": "mL"
		},
		{
			"usValue": "",
			"siValue": "",
			"usAbbr": "tbsp",
			"conventionalUnit": "tablespoons",
			"factor": "15",
			"siUnit": "milliliters",
			"siAbbr": "mL"
		},
		{
			"usValue": "",
			"siValue": "",
			"usAbbr": "fl oz",
			"conventionalUnit": "fluid ounces",
			"factor": "30",
			"siUnit": "milliliters",
			"siAbbr": "mL"
		},
		{
			"usValue": "",
			"siValue": "",
			"usAbbr": "c",
			"conventionalUnit": "cups",
			"factor": "0.24",
			"siUnit": "liters",
			"siAbbr": "L"
		},
		{
			"usValue": "",
			"siValue": "",
			"usAbbr": "pt",
			"conventionalUnit": "US pints",
			"factor": "0.47",
			"siUnit": "liters",
			"siAbbr": "L"
		},
		{
			"usValue": "",
			"siValue": "",
			"usAbbr": "qt",
			"conventionalUnit": "US quarts",
			"factor": "0.95",
			"siUnit": "liters",
			"siAbbr": "L"
		},
		{
			"usValue": "",
			"siValue": "",
			"usAbbr": "gal",
			"conventionalUnit": "US gallons",
			"factor": "3.8",
			"siUnit": "liters",
			"siAbbr": "L"
		},
		{
			"usValue": "",
			"siValue": "",
			"usAbbr": "cu ft",
			"conventionalUnit": "cubic feet",
			"factor": "0.03",
			"siUnit": "cubic meters",
			"siAbbr": "m<sup>3</sup>"
		},
		{
			"usValue": "",
			"siValue": "",
			"usAbbr": "cu yd",
			"conventionalUnit": "cubic yard",
			"factor": "0.76",
			"siUnit": "cubic meters",
			"siAbbr": "m<sup>3</sup>"
		}
	];

	let prefix = "";
	let i = 0;
	let current = "metric units";

	function setBothFromSI(value, i) {
		const { factor, siValue } = units[i];
		$$invalidate(8, units[i].siValue = +value, units);
		$$invalidate(8, units[i].usValue = +(value / factor).toFixed(2), units);
	}

	function setBothFromUS(value, i) {
		const { factor, usValue } = units[i];
		$$invalidate(8, units[i].usValue = +value, units);
		$$invalidate(8, units[i].siValue = +(value * factor).toFixed(2), units);
		
	}

	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Metric> was created with unknown prop '${key}'`);
	});

	let { $$slots = {}, $$scope } = $$props;
	validate_slots("Metric", $$slots, []);

	function input_input_handler() {
		prefix = this.value;
		$$invalidate(0, prefix);
	}

	const input_handler = (i, e) => setBothFromUS(e.target.value, i);
	const input_handler_1 = (i, e) => setBothFromSI(e.target.value, i);

	$$self.$capture_state = () => ({
		fade,
		fly,
		name,
		units,
		prefix,
		i,
		current,
		setBothFromSI,
		setBothFromUS,
		Fa,
		faFlagUsa,
		faGlobe,
		faArrowsAltH,
		faVial,
		faCalculator,
		filteredUnits,
		selected
	});

	$$self.$inject_state = $$props => {
		if ("name" in $$props) name = $$props.name;
		if ("units" in $$props) $$invalidate(8, units = $$props.units);
		if ("prefix" in $$props) $$invalidate(0, prefix = $$props.prefix);
		if ("i" in $$props) $$invalidate(4, i = $$props.i);
		if ("current" in $$props) current = $$props.current;
		if ("filteredUnits" in $$props) $$invalidate(1, filteredUnits = $$props.filteredUnits);
		if ("selected" in $$props) selected = $$props.selected;
	};

	let filteredUnits;
	let selected;

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*prefix, units*/ 257) {
			 $$invalidate(1, filteredUnits = prefix
			? units.filter(unit => {
					const names = `${unit.conventionalUnit}`;
					return names.toLowerCase().startsWith(prefix.toLowerCase());
				})
			: units);
		}

		if ($$self.$$.dirty & /*filteredUnits*/ 2) {
			 selected = filteredUnits[i];
		}
	};

	return [
		prefix,
		filteredUnits,
		setBothFromSI,
		setBothFromUS,
		i,
		input_input_handler,
		input_handler,
		input_handler_1
	];
}

class Metric extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Metric",
			options,
			id: create_fragment.name
		});
	}
}

export default Metric;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWV0cmljLmQwZjgzOWExLmpzIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvcm91dGVzL21ldHJpYy5zdmVsdGUiXSwic291cmNlc0NvbnRlbnQiOlsiPHN2ZWx0ZTpoZWFkPlxuICA8dGl0bGU+bWVkaWNhbHVuaXRjb252ZXJ0ZXIuY29tPC90aXRsZT5cbiAgPG1ldGEgbmFtZT1cImRlc2NyaXB0aW9uXCIgY29udGVudD1cIk1lZGljYWwgdW5pdCBjb252ZXJzaW9uIGNhbGN1bGF0b3IsIG1lZGljYWx1bml0Y29udmVydGVyLmNvbS4gQ29udmVydCBVUyB1bml0cyB0byBJbnRlcm5hdGlvbmFsIChTSSkgdW5pdHMgZWFzaWx5IHdpdGggdGhpcyBvbmxuZSBjYWxjdWxhdG9yLiBFYXNpbHkgc2VhcmNoIGZvciBhIHNwZWNpZmljIGxhYiB0ZXN0LCBlbnRlciBhbnkgdmFsdWUgYW5kIGNvbnZlcnQgdGhlIHVuaXRzLiBGb3IgYm90aCBIdW1hbiBhbmQgVmV0ZXJpbmFyeSB2YWx1ZXMuXCI+XG4gICAgPHNjcmlwdCBhc3luYyBzcmM9XCJodHRwczovL3BhZ2VhZDIuZ29vZ2xlc3luZGljYXRpb24uY29tL3BhZ2VhZC9qcy9hZHNieWdvb2dsZS5qc1wiPjwvc2NyaXB0PlxuXG48IS0tIEdsb2JhbCBzaXRlIHRhZyAoZ3RhZy5qcykgLSBHb29nbGUgQW5hbHl0aWNzIC0tPlxuPHNjcmlwdCBhc3luYyBzcmM9XCJodHRwczovL3d3dy5nb29nbGV0YWdtYW5hZ2VyLmNvbS9ndGFnL2pzP2lkPVVBLTI1NTcwMS0xOFwiPjwvc2NyaXB0PlxuPHNjcmlwdD5cbiAgd2luZG93LmRhdGFMYXllciA9IHdpbmRvdy5kYXRhTGF5ZXIgfHwgW107XG4gIGZ1bmN0aW9uIGd0YWcoKXtkYXRhTGF5ZXIucHVzaChhcmd1bWVudHMpO31cbiAgZ3RhZygnanMnLCBuZXcgRGF0ZSgpKTtcblxuICBndGFnKCdjb25maWcnLCAnVUEtMjU1NzAxLTE4Jyk7XG48L3NjcmlwdD5cbjwvc3ZlbHRlOmhlYWQ+XG5cblxuXG5cbjxzY3JpcHQ+XG4gIGltcG9ydCB7IGZhZGUsIGZseSB9IGZyb20gJ3N2ZWx0ZS90cmFuc2l0aW9uJztcbiAvL2ltcG9ydCBqJCBmcm9tICdqcXVlcnknO1xuLy9pbXBvcnQgeyBvbk1vdW50IH0gZnJvbSAnc3ZlbHRlJztcblxuLy9vbk1vdW50KCgpID0+IHtcbi8vICAgIGokKCcudGVzdCcpLmNsaWNrKCgpID0+IHtcbi8vICAgICAgICBjb25zb2xlLmxvZygndGVzdCcpO1xuIC8vICAgfSk7XG4vL30pO1xuXG5cblxuXG5cbmxldCBuYW1lID0gJyc7XG5cbiAgbGV0IHVuaXRzID0gW3tcInVzVmFsdWVcIjpcIlwiLFwic2lWYWx1ZVwiOlwiXCIsXCJ1c0FiYnJcIjpcImluXCIsXCJjb252ZW50aW9uYWxVbml0XCI6XCJpbmNoZXNcIixcImZhY3RvclwiOlwiMi41NFwiLFwic2lVbml0XCI6XCJjZW50aW1ldGVyc1wiLFwic2lBYmJyXCI6XCJjbVwifSx7XCJ1c1ZhbHVlXCI6XCJcIixcInNpVmFsdWVcIjpcIlwiLFwidXNBYmJyXCI6XCJmdFwiLFwiY29udmVudGlvbmFsVW5pdFwiOlwiZmVldFwiLFwiZmFjdG9yXCI6XCIzMFwiLFwic2lVbml0XCI6XCJjZW50aW1ldGVyc1wiLFwic2lBYmJyXCI6XCJjbVwifSx7XCJ1c1ZhbHVlXCI6XCJcIixcInNpVmFsdWVcIjpcIlwiLFwidXNBYmJyXCI6XCJmdFwiLFwiY29udmVudGlvbmFsVW5pdFwiOlwiZmVldFwiLFwiZmFjdG9yXCI6XCIwLjNcIixcInNpVW5pdFwiOlwibWV0ZXJzXCIsXCJzaUFiYnJcIjpcIm1cIn0se1widXNWYWx1ZVwiOlwiXCIsXCJzaVZhbHVlXCI6XCJcIixcInVzQWJiclwiOlwieWRcIixcImNvbnZlbnRpb25hbFVuaXRcIjpcInlhcmRzXCIsXCJmYWN0b3JcIjpcIjAuOVwiLFwic2lVbml0XCI6XCJtZXRlcnNcIixcInNpQWJiclwiOlwibVwifSx7XCJ1c1ZhbHVlXCI6XCJcIixcInNpVmFsdWVcIjpcIlwiLFwidXNBYmJyXCI6XCJtaWxlc1wiLFwiY29udmVudGlvbmFsVW5pdFwiOlwibWlsZXNcIixcImZhY3RvclwiOlwiMS42XCIsXCJzaVVuaXRcIjpcImtpbG9tZXRlcnNcIixcInNpQWJiclwiOlwia21cIn0se1widXNWYWx1ZVwiOlwiXCIsXCJzaVZhbHVlXCI6XCJcIixcInVzQWJiclwiOlwic3EgaW5cIixcImNvbnZlbnRpb25hbFVuaXRcIjpcInNxdWFyZSBpbmNoZXNcIixcImZhY3RvclwiOlwiNi41XCIsXCJzaVVuaXRcIjpcInNxdWFyZSBjZW50aW1ldGVyc1wiLFwic2lBYmJyXCI6XCJjbTxzdXA+Mjwvc3VwPlwifSx7XCJ1c1ZhbHVlXCI6XCJcIixcInNpVmFsdWVcIjpcIlwiLFwidXNBYmJyXCI6XCJzcSBmdFwiLFwiY29udmVudGlvbmFsVW5pdFwiOlwic3F1YXJlIGZlZXRcIixcImZhY3RvclwiOlwiMC4wOVwiLFwic2lVbml0XCI6XCJzcXVhcmUgbWV0ZXJzXCIsXCJzaUFiYnJcIjpcIm08c3VwPjI8L3N1cD5cIn0se1widXNWYWx1ZVwiOlwiXCIsXCJzaVZhbHVlXCI6XCJcIixcInVzQWJiclwiOlwic3EgeWRcIixcImNvbnZlbnRpb25hbFVuaXRcIjpcInNxdWFyZSB5YXJkXCIsXCJmYWN0b3JcIjpcIjAuOFwiLFwic2lVbml0XCI6XCJzcXVhcmUgbWV0ZXJzXCIsXCJzaUFiYnJcIjpcIm08c3VwPjI8L3N1cD5cIn0se1widXNWYWx1ZVwiOlwiXCIsXCJzaVZhbHVlXCI6XCJcIixcInVzQWJiclwiOlwic3EgbWlsZXNcIixcImNvbnZlbnRpb25hbFVuaXRcIjpcInNxdWFyZSBtaWxlc1wiLFwiZmFjdG9yXCI6XCIyLjZcIixcInNpVW5pdFwiOlwic3F1YXJlIGtpbG9tZXRlcnNcIixcInNpQWJiclwiOlwia208c3VwPjI8L3N1cD5cIn0se1widXNWYWx1ZVwiOlwiXCIsXCJzaVZhbHVlXCI6XCJcIixcInVzQWJiclwiOlwib3pcIixcImNvbnZlbnRpb25hbFVuaXRcIjpcIm91bmNlc1wiLFwiZmFjdG9yXCI6XCIyOFwiLFwic2lVbml0XCI6XCJncmFtc1wiLFwic2lBYmJyXCI6XCJnXCJ9LHtcInVzVmFsdWVcIjpcIlwiLFwic2lWYWx1ZVwiOlwiXCIsXCJ1c0FiYnJcIjpcImxiXCIsXCJjb252ZW50aW9uYWxVbml0XCI6XCJwb3VuZHNcIixcImZhY3RvclwiOlwiMC40NVwiLFwic2lVbml0XCI6XCJraWxvZ3JhbXNcIixcInNpQWJiclwiOlwia2dcIn0se1widXNWYWx1ZVwiOlwiXCIsXCJzaVZhbHVlXCI6XCJcIixcInVzQWJiclwiOlwidHNwXCIsXCJjb252ZW50aW9uYWxVbml0XCI6XCJ0ZWFzcG9vbnNcIixcImZhY3RvclwiOlwiNVwiLFwic2lVbml0XCI6XCJtaWxsaWxpdGVyc1wiLFwic2lBYmJyXCI6XCJtTFwifSx7XCJ1c1ZhbHVlXCI6XCJcIixcInNpVmFsdWVcIjpcIlwiLFwidXNBYmJyXCI6XCJ0YnNwXCIsXCJjb252ZW50aW9uYWxVbml0XCI6XCJ0YWJsZXNwb29uc1wiLFwiZmFjdG9yXCI6XCIxNVwiLFwic2lVbml0XCI6XCJtaWxsaWxpdGVyc1wiLFwic2lBYmJyXCI6XCJtTFwifSx7XCJ1c1ZhbHVlXCI6XCJcIixcInNpVmFsdWVcIjpcIlwiLFwidXNBYmJyXCI6XCJmbCBvelwiLFwiY29udmVudGlvbmFsVW5pdFwiOlwiZmx1aWQgb3VuY2VzXCIsXCJmYWN0b3JcIjpcIjMwXCIsXCJzaVVuaXRcIjpcIm1pbGxpbGl0ZXJzXCIsXCJzaUFiYnJcIjpcIm1MXCJ9LHtcInVzVmFsdWVcIjpcIlwiLFwic2lWYWx1ZVwiOlwiXCIsXCJ1c0FiYnJcIjpcImNcIixcImNvbnZlbnRpb25hbFVuaXRcIjpcImN1cHNcIixcImZhY3RvclwiOlwiMC4yNFwiLFwic2lVbml0XCI6XCJsaXRlcnNcIixcInNpQWJiclwiOlwiTFwifSx7XCJ1c1ZhbHVlXCI6XCJcIixcInNpVmFsdWVcIjpcIlwiLFwidXNBYmJyXCI6XCJwdFwiLFwiY29udmVudGlvbmFsVW5pdFwiOlwiVVMgcGludHNcIixcImZhY3RvclwiOlwiMC40N1wiLFwic2lVbml0XCI6XCJsaXRlcnNcIixcInNpQWJiclwiOlwiTFwifSx7XCJ1c1ZhbHVlXCI6XCJcIixcInNpVmFsdWVcIjpcIlwiLFwidXNBYmJyXCI6XCJxdFwiLFwiY29udmVudGlvbmFsVW5pdFwiOlwiVVMgcXVhcnRzXCIsXCJmYWN0b3JcIjpcIjAuOTVcIixcInNpVW5pdFwiOlwibGl0ZXJzXCIsXCJzaUFiYnJcIjpcIkxcIn0se1widXNWYWx1ZVwiOlwiXCIsXCJzaVZhbHVlXCI6XCJcIixcInVzQWJiclwiOlwiZ2FsXCIsXCJjb252ZW50aW9uYWxVbml0XCI6XCJVUyBnYWxsb25zXCIsXCJmYWN0b3JcIjpcIjMuOFwiLFwic2lVbml0XCI6XCJsaXRlcnNcIixcInNpQWJiclwiOlwiTFwifSx7XCJ1c1ZhbHVlXCI6XCJcIixcInNpVmFsdWVcIjpcIlwiLFwidXNBYmJyXCI6XCJjdSBmdFwiLFwiY29udmVudGlvbmFsVW5pdFwiOlwiY3ViaWMgZmVldFwiLFwiZmFjdG9yXCI6XCIwLjAzXCIsXCJzaVVuaXRcIjpcImN1YmljIG1ldGVyc1wiLFwic2lBYmJyXCI6XCJtPHN1cD4zPC9zdXA+XCJ9LHtcInVzVmFsdWVcIjpcIlwiLFwic2lWYWx1ZVwiOlwiXCIsXCJ1c0FiYnJcIjpcImN1IHlkXCIsXCJjb252ZW50aW9uYWxVbml0XCI6XCJjdWJpYyB5YXJkXCIsXCJmYWN0b3JcIjpcIjAuNzZcIixcInNpVW5pdFwiOlwiY3ViaWMgbWV0ZXJzXCIsXCJzaUFiYnJcIjpcIm08c3VwPjM8L3N1cD5cIn1dO1xuICBcblxuXG5cdGxldCBwcmVmaXggPSAnJztcblx0bGV0IGkgPSAwO1xuICBcdGxldCBjdXJyZW50ID0gJ21ldHJpYyB1bml0cyc7XG4gIGZ1bmN0aW9uIHNldEJvdGhGcm9tU0kodmFsdWUsIGkpIHtcbiAgICBjb25zdCB7ZmFjdG9yLCBzaVZhbHVlfSA9IHVuaXRzW2ldO1xuICAgIHVuaXRzW2ldLnNpVmFsdWUgPSArdmFsdWU7XG4gICAgdW5pdHNbaV0udXNWYWx1ZSA9ICsodmFsdWUgLyBmYWN0b3IpLnRvRml4ZWQoMik7XG4gIH1cbiAgZnVuY3Rpb24gc2V0Qm90aEZyb21VUyh2YWx1ZSwgaSkge1xuICAgIGNvbnN0IHtmYWN0b3IsIHVzVmFsdWV9ID0gdW5pdHNbaV07XG4gICAgdW5pdHNbaV0udXNWYWx1ZSA9ICt2YWx1ZTtcbiAgICB1bml0c1tpXS5zaVZhbHVlID0gKyh2YWx1ZSAqIGZhY3RvcikudG9GaXhlZCgyKTs7XG4gIH1cblxuIFxuXG5cdCQ6IGZpbHRlcmVkVW5pdHMgPSBwcmVmaXhcblx0XHQ/IHVuaXRzLmZpbHRlcih1bml0ID0+IHtcblx0XHRcdGNvbnN0IG5hbWVzID0gYCR7dW5pdC5jb252ZW50aW9uYWxVbml0fWA7XG5cdFx0XHRyZXR1cm4gbmFtZXMudG9Mb3dlckNhc2UoKS5zdGFydHNXaXRoKHByZWZpeC50b0xvd2VyQ2FzZSgpKTtcbiAgICAgIFxuXHRcdH0pXG5cdFx0OiB1bml0cztcbiQ6IHNlbGVjdGVkID0gZmlsdGVyZWRVbml0c1tpXTtcblxuaW1wb3J0IEZhIGZyb20gJ3N2ZWx0ZS1mYSc7XG5pbXBvcnQgeyBmYUZsYWdVc2EsIGZhR2xvYmUsIGZhQXJyb3dzQWx0SCwgZmFWaWFsLCBmYUNhbGN1bGF0b3IgfSBmcm9tICdAZm9ydGF3ZXNvbWUvcHJvLWR1b3RvbmUtc3ZnLWljb25zJztcbjwvc2NyaXB0PlxuXG5cblxuXG5cblxuXG5cblxuICA8ZGl2IGNsYXNzPVwibXgtYXV0byBweC0xXCI+XG5cbiAgXG5cblxuXG5cbiA8ZGl2IGNsYXNzPVwibWQ6dy0xLzQgbWItMyBzbTp3LTEvMyB0ZXh0LWJsYWNrIHAtMVwiPlNlYXJjaCBVbml0cyA8aW5wdXQgcGxhY2Vob2xkZXI9XCJVbml0XCIgY2xhc3M9XCJtdC0xIGJsb2NrIHctZnVsbCAgdGV4dC1ncmF5LTcwMCBib3JkZXIgYm9yZGVyLWdyYXktMzAwIHJvdW5kZWQtbGcgcHktMiBweC0yIGxlYWRpbmctdGlnaHQgYmctd2hpdGUgIGZvY3VzOm91dGxpbmUtbm9uZSBmb2N1czpiZy13aGl0ZSBmb2N1czpib3JkZXItZ3JheS01MDBcIiB0eXBlPVwic2VhcmNoXCIgYmluZDp2YWx1ZT17cHJlZml4fT48L2Rpdj5cblxuXG4gIHsjZWFjaCBmaWx0ZXJlZFVuaXRzIGFzIHVuaXQsIGl9XG4gPGRpdiBjbGFzcz1cImJvcmRlciBib3JkZXItZ3JheS0zMDAgcm91bmRlZCBtYi0yXCI+XG5cblxuIDxkaXYgY2xhc3M9XCJmbGV4IGZsZXgtd3JhcCBtZDpmbGV4LW5vLXdyYXAgbGc6ZmxleC1uby13cmFwIHB4LTEgIG1iLTFcIj5cbiA8ZGl2IGNsYXNzPVwidy1mdWxsIG1kOnctMi81XCIgPlxuICAgICAgICAgICAgXG4gICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJmb250LWJvbGQgdGV4dC1ibGFjayB0ZXh0LXhsXCI+e3VuaXQuY29udmVudGlvbmFsVW5pdH0gPEZhIGNsYXNzPVwiaW5saW5lIHRleHQtZ3JheS03MDBcIiBzaXplPVwibGdcIiBpY29uPXtmYUFycm93c0FsdEh9Lz4ge3VuaXQuc2lVbml0fTwvZGl2PlxuICAgICAgICAgICAgXG4gICAgICAgICA8ZGl2IGNsYXNzPVwidGV4dC1ncmF5LTcwMCB0ZXh0LXhzXCI+PCEtLSA8RmEgY2xhc3M9XCJpbmxpbmVcIiBzaXplPVwic21cIiBpY29uPXtmYUNhbGN1bGF0b3J9Lz4gLS0+ICA8c3Ryb25nPkNvbnZlcnNpb24gRmFjdG9yOjwvc3Ryb25nPiB7dW5pdC5mYWN0b3J9IDwvZGl2PlxuICAgICAgICAgICAgXG4gIDwvZGl2PlxuICA8ZGl2IGNsYXNzPVwibWQ6dy0xLzMgdy0xLzIgIGgtMTQgcHItMSBwbC0xXCI+XG4gIDxsYWJlbCBjbGFzcz1cImJsb2NrIHVwcGVyY2FzZSB0cmFja2luZy13aWRlIHRleHQtZ3JheS03MDAgdGV4dC14cyBmb250LWJvbGQgbWItMVwiIGZvcj1cImdyaWQtZmlyc3QtbmFtZVwiPlxuICAgICAgIDxGYSBjbGFzcz1cImlubGluZVwiIHNpemU9XCJsZ1wiIHByaW1hcnlDb2xvcj1cImJsdWVcIiBzZWNvbmRhcnlDb2xvcj1cInJlZFwiIGljb249e2ZhRmxhZ1VzYX0vPiBVUyBVbml0IFxuICAgICAgPC9sYWJlbD5cbiAgICAgICAgICAgICAgIDxpbnB1dCBjbGFzcz1cImFwcGVhcmFuY2Utbm9uZSBtdC0xIGJsb2NrIHctZnVsbCBiZy1ncmF5LTEwMCB0ZXh0LWdyYXktNzAwIGJvcmRlciBib3JkZXItYmx1ZS0yMDAgcm91bmRlZCBweS0yIHB4LTIgbGVhZGluZy10aWdodCBmb2N1czpvdXRsaW5lLW5vbmUgZm9jdXM6Ymctd2hpdGUgZm9jdXM6Ym9yZGVyLWdyYXktNTAwXCIgbmFtZT1cInVze2l9XCIgdmFsdWU9e3VuaXQudXNWYWx1ZX0gb246aW5wdXQ9XCJ7ZSA9PiBzZXRCb3RoRnJvbVVTKGUudGFyZ2V0LnZhbHVlLCBpKX1cIiAgdHlwZT1udW1iZXIgcGxhY2Vob2xkZXI9XCIgXCI+XG48ZGl2IGNsYXNzPVwidGV4dC1ncmF5LTcwMCB0ZXh0LXNtXCI+e3VuaXQuY29udmVudGlvbmFsVW5pdH08L2Rpdj5cbiAgICAgICAgICAgICA8L2Rpdj5cblxuIDxkaXYgY2xhc3M9XCJtZDp3LTEvMyB3LTEvMiAgaC0xNCBwci0xIHBsLTFcIj5cbiA8bGFiZWwgY2xhc3M9XCJibG9jayB1cHBlcmNhc2UgdHJhY2tpbmctd2lkZSB0ZXh0LWdyYXktNzAwIHRleHQteHMgZm9udC1ib2xkIG1iLTFcIiBmb3I9XCJncmlkLWZpcnN0LW5hbWVcIj5cbiAgICAgICAgPEZhIGNsYXNzPVwiaW5saW5lXCIgc2l6ZT1cImxnXCIgcHJpbWFyeUNvbG9yPVwiZ3JlZW5cIiBzZWNvbmRhcnlDb2xvcj1cImxpZ2h0Ymx1ZVwiIGljb249e2ZhR2xvYmV9Lz4gU0kgVW5pdCBcbiAgICAgIDwvbGFiZWw+XG4gICAgICAgICAgICAgICA8aW5wdXQgY2xhc3M9XCJhcHBlYXJhbmNlLW5vbmUgbXQtMSBibG9jayB3LWZ1bGwgYmctZ3JheS0xMDAgdGV4dC1ncmF5LTcwMCBib3JkZXIgYm9yZGVyLWdyYXktMjAwIHJvdW5kZWQgcHktMiBweC0yIGxlYWRpbmctdGlnaHQgZm9jdXM6b3V0bGluZS1ub25lIGZvY3VzOmJnLXdoaXRlIGZvY3VzOmJvcmRlci1ncmF5LTUwMFwiIG5hbWU9XCJzaXtpfVwiIHZhbHVlPXt1bml0LnNpVmFsdWV9IG9uOmlucHV0PVwie2UgPT4gc2V0Qm90aEZyb21TSShlLnRhcmdldC52YWx1ZSwgaSl9XCIgdHlwZT1udW1iZXIgcGxhY2Vob2xkZXI9XCIgXCI+XG48ZGl2IGNsYXNzPVwidGV4dC1ncmF5LTcwMCB0ZXh0LXNtXCI+e3VuaXQuc2lVbml0fSA8L2Rpdj5cbiAgICAgICAgICAgICA8L2Rpdj5cblxuIFxuIFxuIFxuIDwvZGl2PiBcbjwvZGl2Plxuey9lYWNofVxuICBcbiAgIFxuICAgXG4gICBcblxuICAgIFxuXG4gIFxuICAgPC9kaXY+XG48Zm9vdGVyIGNsYXNzPSd3LWZ1bGwgdGV4dC1jZW50ZXIgYm9yZGVyLXQgYm9yZGVyLWdyZXkgcC00IHBpbi1iJz5cbiAgICAgICAgICAgIHd3dy5tZWRpY2FsdW5pdGNvbnZlcnRlci5jb21cbiAgICAgICAgPC9mb290ZXI+Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O3lCQThGeUQsR0FBSSxLQUFDLGdCQUFnQjs7Ozs7eUJBQW9FLEdBQUksS0FBQyxNQUFNOzs7Ozs7O3lCQUVmLEdBQUksS0FBQyxNQUFNOzs7Ozs7Ozs7Ozs7OzBCQVFySCxHQUFJLEtBQUMsZ0JBQWdCOzs7Ozs7Ozs7Ozs7OzBCQVFyQixHQUFJLEtBQUMsTUFBTTs7Ozs7Ozs7Ozs7VUFsQmtGLFlBQVk7Ozs7Ozs7Ozs7O1VBTzFELFNBQVM7Ozs7Ozs7Ozs7Ozs7OztVQVFELE9BQU87Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7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QWE7R0FBQyxRQUFRLEVBQUMsSUFBSTs7O0dBQUcsU0FBUyxFQUFDLEVBQUU7R0FBQyxTQUFTLEVBQUMsRUFBRTtHQUFDLFFBQVEsRUFBQyxHQUFHO0dBQUMsa0JBQWtCLEVBQUMsTUFBTTtHQUFDLFFBQVEsRUFBQyxNQUFNO0dBQUMsUUFBUSxFQUFDLFFBQVE7R0FBQyxRQUFRLEVBQUMsR0FBRzs7O0dBQUcsU0FBUyxFQUFDLEVBQUU7R0FBQyxTQUFTLEVBQUMsRUFBRTtHQUFDLFFBQVEsRUFBQyxJQUFJO0dBQUMsa0JBQWtCLEVBQUMsVUFBVTtHQUFDLFFBQVEsRUFBQyxNQUFNO0dBQUMsUUFBUSxFQUFDLFFBQVE7R0FBQyxRQUFRLEVBQUMsR0FBRzs7O0dBQUcsU0FBUyxFQUFDLEVBQUU7R0FBQyxTQUFTLEVBQUMsRUFBRTtHQUFDLFFBQVEsRUFBQyxJQUFJO0dBQUMsa0JBQWtCLEVBQUMsV0FBVztHQUFDLFFBQVEsRUFBQyxNQUFNO0dBQUMsUUFBUSxFQUFDLFFBQVE7R0FBQyxRQUFRLEVBQUMsR0FBRzs7O0dBQUcsU0FBUyxFQUFDLEVBQUU7R0FBQyxTQUFTLEVBQUMsRUFBRTtHQUFDLFFBQVEsRUFBQyxLQUFLO0dBQUMsa0JBQWtCLEVBQUMsWUFBWTtHQUFDLFFBQVEsRUFBQyxLQUFLO0dBQUMsUUFBUSxFQUFDLFFBQVE7R0FBQyxRQUFRLEVBQUMsR0FBRzs7O0dBQUcsU0FBUyxFQUFDLEVBQUU7R0FBQyxTQUFTLEVBQUMsRUFBRTtHQUFDLFFBQVEsRUFBQyxPQUFPO0dBQUMsa0JBQWtCLEVBQUMsWUFBWTtHQUFDLFFBQVEsRUFBQyxNQUFNO0dBQUMsUUFBUSxFQUFDLGNBQWM7R0FBQyxRQUFRLEVBQUMsZUFBZTs7O0dBQUcsU0FBUyxFQUFDLEVBQUU7R0FBQyxTQUFTLEVBQUMsRUFBRTtHQUFDLFFBQVEsRUFBQyxPQUFPO0dBQUMsa0JBQWtCLEVBQUMsWUFBWTtHQUFDLFFBQVEsRUFBQyxNQUFNO0dBQUMsUUFBUSxFQUFDLGNBQWM7R0FBQyxRQUFRLEVBQUMsZUFBZTs7OztLQUl2Z0YsTUFBTSxHQUFHLEVBQUU7S0FDWCxDQUFDLEdBQUcsQ0FBQztLQUNILE9BQU8sR0FBRyxjQUFjOztVQUNwQixhQUFhLENBQUMsS0FBSyxFQUFFLENBQUM7VUFDdEIsTUFBTSxFQUFFLE9BQU8sS0FBSSxLQUFLLENBQUMsQ0FBQztrQkFDakMsS0FBSyxDQUFDLENBQUMsRUFBRSxPQUFPLElBQUksS0FBSztrQkFDekIsS0FBSyxDQUFDLENBQUMsRUFBRSxPQUFPLEtBQUssS0FBSyxHQUFHLE1BQU0sRUFBRSxPQUFPLENBQUMsQ0FBQzs7O1VBRXZDLGFBQWEsQ0FBQyxLQUFLLEVBQUUsQ0FBQztVQUN0QixNQUFNLEVBQUUsT0FBTyxLQUFJLEtBQUssQ0FBQyxDQUFDO2tCQUNqQyxLQUFLLENBQUMsQ0FBQyxFQUFFLE9BQU8sSUFBSSxLQUFLO2tCQUN6QixLQUFLLENBQUMsQ0FBQyxFQUFFLE9BQU8sS0FBSyxLQUFLLEdBQUcsTUFBTSxFQUFFLE9BQU8sQ0FBQyxDQUFDOzs7Ozs7Ozs7Ozs7OztFQWlDd08sTUFBTTs7OzsyQkFtQjFDLENBQUMsS0FBSSxhQUFhLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxLQUFLLEVBQUUsQ0FBQzs2QkFRcEMsQ0FBQyxLQUFJLGFBQWEsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLEtBQUssRUFBRSxDQUFDOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztvQkF2RHRSLGFBQWEsR0FBRyxNQUFNO0tBQ3RCLEtBQUssQ0FBQyxNQUFNLENBQUMsSUFBSTtXQUNaLEtBQUssTUFBTSxJQUFJLENBQUMsZ0JBQWdCO1lBQy9CLEtBQUssQ0FBQyxXQUFXLEdBQUcsVUFBVSxDQUFDLE1BQU0sQ0FBQyxXQUFXOztLQUd2RCxLQUFLOzs7O0lBQ04sUUFBUSxHQUFHLGFBQWEsQ0FBQyxDQUFDOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzsifQ==
